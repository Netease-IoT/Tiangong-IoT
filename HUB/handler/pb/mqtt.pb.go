// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mqtt.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceCred struct {
	ProductKey           string   `protobuf:"bytes,1,opt,name=productKey,proto3" json:"productKey,omitempty"`
	DeviceName           string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceCred) Reset()         { *m = DeviceCred{} }
func (m *DeviceCred) String() string { return proto.CompactTextString(m) }
func (*DeviceCred) ProtoMessage()    {}
func (*DeviceCred) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{0}
}

func (m *DeviceCred) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCred.Unmarshal(m, b)
}
func (m *DeviceCred) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCred.Marshal(b, m, deterministic)
}
func (m *DeviceCred) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCred.Merge(m, src)
}
func (m *DeviceCred) XXX_Size() int {
	return xxx_messageInfo_DeviceCred.Size(m)
}
func (m *DeviceCred) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCred.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCred proto.InternalMessageInfo

func (m *DeviceCred) GetProductKey() string {
	if m != nil {
		return m.ProductKey
	}
	return ""
}

func (m *DeviceCred) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type ConnReq struct {
	Cred                 *DeviceCred `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	Token                string      `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	CleanSession         bool        `protobuf:"varint,3,opt,name=cleanSession,proto3" json:"cleanSession,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ConnReq) Reset()         { *m = ConnReq{} }
func (m *ConnReq) String() string { return proto.CompactTextString(m) }
func (*ConnReq) ProtoMessage()    {}
func (*ConnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{1}
}

func (m *ConnReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnReq.Unmarshal(m, b)
}
func (m *ConnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnReq.Marshal(b, m, deterministic)
}
func (m *ConnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnReq.Merge(m, src)
}
func (m *ConnReq) XXX_Size() int {
	return xxx_messageInfo_ConnReq.Size(m)
}
func (m *ConnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnReq proto.InternalMessageInfo

func (m *ConnReq) GetCred() *DeviceCred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *ConnReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *ConnReq) GetCleanSession() bool {
	if m != nil {
		return m.CleanSession
	}
	return false
}

type Response struct {
	Succeed              bool     `protobuf:"varint,1,opt,name=succeed,proto3" json:"succeed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSucceed() bool {
	if m != nil {
		return m.Succeed
	}
	return false
}

type DiscReq struct {
	Cred                 *DeviceCred `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	CleanSession         bool        `protobuf:"varint,2,opt,name=cleanSession,proto3" json:"cleanSession,omitempty"`
	HasWill              bool        `protobuf:"varint,3,opt,name=hasWill,proto3" json:"hasWill,omitempty"`
	MsgId                string      `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	WillTopic            string      `protobuf:"bytes,5,opt,name=willTopic,proto3" json:"willTopic,omitempty"`
	WillQos              int32       `protobuf:"varint,6,opt,name=willQos,proto3" json:"willQos,omitempty"`
	WillMessage          string      `protobuf:"bytes,7,opt,name=willMessage,proto3" json:"willMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DiscReq) Reset()         { *m = DiscReq{} }
func (m *DiscReq) String() string { return proto.CompactTextString(m) }
func (*DiscReq) ProtoMessage()    {}
func (*DiscReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{3}
}

func (m *DiscReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscReq.Unmarshal(m, b)
}
func (m *DiscReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscReq.Marshal(b, m, deterministic)
}
func (m *DiscReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscReq.Merge(m, src)
}
func (m *DiscReq) XXX_Size() int {
	return xxx_messageInfo_DiscReq.Size(m)
}
func (m *DiscReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscReq.DiscardUnknown(m)
}

var xxx_messageInfo_DiscReq proto.InternalMessageInfo

func (m *DiscReq) GetCred() *DeviceCred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *DiscReq) GetCleanSession() bool {
	if m != nil {
		return m.CleanSession
	}
	return false
}

func (m *DiscReq) GetHasWill() bool {
	if m != nil {
		return m.HasWill
	}
	return false
}

func (m *DiscReq) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *DiscReq) GetWillTopic() string {
	if m != nil {
		return m.WillTopic
	}
	return ""
}

func (m *DiscReq) GetWillQos() int32 {
	if m != nil {
		return m.WillQos
	}
	return 0
}

func (m *DiscReq) GetWillMessage() string {
	if m != nil {
		return m.WillMessage
	}
	return ""
}

type SubReq struct {
	Cred                 *DeviceCred `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	TopicFilters         []string    `protobuf:"bytes,2,rep,name=topicFilters,proto3" json:"topicFilters,omitempty"`
	Qoss                 []int32     `protobuf:"varint,3,rep,packed,name=qoss,proto3" json:"qoss,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SubReq) Reset()         { *m = SubReq{} }
func (m *SubReq) String() string { return proto.CompactTextString(m) }
func (*SubReq) ProtoMessage()    {}
func (*SubReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{4}
}

func (m *SubReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubReq.Unmarshal(m, b)
}
func (m *SubReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubReq.Marshal(b, m, deterministic)
}
func (m *SubReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubReq.Merge(m, src)
}
func (m *SubReq) XXX_Size() int {
	return xxx_messageInfo_SubReq.Size(m)
}
func (m *SubReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SubReq.DiscardUnknown(m)
}

var xxx_messageInfo_SubReq proto.InternalMessageInfo

func (m *SubReq) GetCred() *DeviceCred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *SubReq) GetTopicFilters() []string {
	if m != nil {
		return m.TopicFilters
	}
	return nil
}

func (m *SubReq) GetQoss() []int32 {
	if m != nil {
		return m.Qoss
	}
	return nil
}

type SubRes struct {
	Qoss                 []int32  `protobuf:"varint,1,rep,packed,name=qoss,proto3" json:"qoss,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRes) Reset()         { *m = SubRes{} }
func (m *SubRes) String() string { return proto.CompactTextString(m) }
func (*SubRes) ProtoMessage()    {}
func (*SubRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{5}
}

func (m *SubRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubRes.Unmarshal(m, b)
}
func (m *SubRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubRes.Marshal(b, m, deterministic)
}
func (m *SubRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRes.Merge(m, src)
}
func (m *SubRes) XXX_Size() int {
	return xxx_messageInfo_SubRes.Size(m)
}
func (m *SubRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRes.DiscardUnknown(m)
}

var xxx_messageInfo_SubRes proto.InternalMessageInfo

func (m *SubRes) GetQoss() []int32 {
	if m != nil {
		return m.Qoss
	}
	return nil
}

type UnsubReq struct {
	Cred                 *DeviceCred `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	TopicFilters         []string    `protobuf:"bytes,2,rep,name=topicFilters,proto3" json:"topicFilters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UnsubReq) Reset()         { *m = UnsubReq{} }
func (m *UnsubReq) String() string { return proto.CompactTextString(m) }
func (*UnsubReq) ProtoMessage()    {}
func (*UnsubReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{6}
}

func (m *UnsubReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubReq.Unmarshal(m, b)
}
func (m *UnsubReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubReq.Marshal(b, m, deterministic)
}
func (m *UnsubReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubReq.Merge(m, src)
}
func (m *UnsubReq) XXX_Size() int {
	return xxx_messageInfo_UnsubReq.Size(m)
}
func (m *UnsubReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubReq proto.InternalMessageInfo

func (m *UnsubReq) GetCred() *DeviceCred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *UnsubReq) GetTopicFilters() []string {
	if m != nil {
		return m.TopicFilters
	}
	return nil
}

type PubReq struct {
	Cred                 *DeviceCred `protobuf:"bytes,1,opt,name=cred,proto3" json:"cred,omitempty"`
	MsgId                string      `protobuf:"bytes,2,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Topic                string      `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Qos                  int32       `protobuf:"varint,4,opt,name=qos,proto3" json:"qos,omitempty"`
	Content              string      `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp            int64       `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PubReq) Reset()         { *m = PubReq{} }
func (m *PubReq) String() string { return proto.CompactTextString(m) }
func (*PubReq) ProtoMessage()    {}
func (*PubReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35327d90702720f6, []int{7}
}

func (m *PubReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PubReq.Unmarshal(m, b)
}
func (m *PubReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PubReq.Marshal(b, m, deterministic)
}
func (m *PubReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubReq.Merge(m, src)
}
func (m *PubReq) XXX_Size() int {
	return xxx_messageInfo_PubReq.Size(m)
}
func (m *PubReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PubReq.DiscardUnknown(m)
}

var xxx_messageInfo_PubReq proto.InternalMessageInfo

func (m *PubReq) GetCred() *DeviceCred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func (m *PubReq) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *PubReq) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PubReq) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *PubReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PubReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceCred)(nil), "pb.DeviceCred")
	proto.RegisterType((*ConnReq)(nil), "pb.ConnReq")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*DiscReq)(nil), "pb.DiscReq")
	proto.RegisterType((*SubReq)(nil), "pb.SubReq")
	proto.RegisterType((*SubRes)(nil), "pb.SubRes")
	proto.RegisterType((*UnsubReq)(nil), "pb.UnsubReq")
	proto.RegisterType((*PubReq)(nil), "pb.PubReq")
}

func init() {
	proto.RegisterFile("mqtt.proto", fileDescriptor_35327d90702720f6)
}

var fileDescriptor_35327d90702720f6 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x8a, 0xd4, 0x40,
	0x10, 0xde, 0x4c, 0xe6, 0xb7, 0x66, 0x11, 0x69, 0x3c, 0x34, 0xcb, 0x22, 0xa1, 0x51, 0x19, 0x11,
	0xe6, 0xb0, 0x3e, 0xc2, 0x2c, 0x8a, 0xe8, 0xca, 0x6c, 0xcf, 0x88, 0xe7, 0xa4, 0x53, 0xcc, 0x36,
	0x26, 0xe9, 0x4c, 0xaa, 0xa3, 0xf8, 0x3a, 0x3e, 0x95, 0xe0, 0xcb, 0x48, 0x77, 0x12, 0x93, 0x75,
	0xf7, 0xb0, 0x82, 0xb7, 0xfa, 0xaa, 0x6a, 0xbe, 0xaf, 0xba, 0xbe, 0x9a, 0x00, 0xe4, 0x47, 0x6b,
	0xd7, 0x65, 0x65, 0xac, 0x61, 0xa3, 0x32, 0x11, 0x1f, 0x00, 0x2e, 0xf1, 0xab, 0x56, 0xb8, 0xa9,
	0x30, 0x65, 0x4f, 0x01, 0xca, 0xca, 0xa4, 0xb5, 0xb2, 0xef, 0xf1, 0x3b, 0x0f, 0xa2, 0x60, 0xb5,
	0x90, 0x83, 0x8c, 0xab, 0xa7, 0xbe, 0xfb, 0x63, 0x9c, 0x23, 0x1f, 0x35, 0xf5, 0x3e, 0x23, 0x0e,
	0x30, 0xdb, 0x98, 0xa2, 0x90, 0x78, 0x64, 0x02, 0xc6, 0xaa, 0xc2, 0xd4, 0x93, 0x2c, 0x2f, 0x1e,
	0xad, 0xcb, 0x64, 0xdd, 0x0b, 0x49, 0x5f, 0x63, 0x4f, 0x60, 0x62, 0xcd, 0x17, 0x2c, 0x5a, 0xa6,
	0x06, 0x30, 0x01, 0xa7, 0x2a, 0xc3, 0xb8, 0xd8, 0x21, 0x91, 0x36, 0x05, 0x0f, 0xa3, 0x60, 0x35,
	0x97, 0xb7, 0x72, 0xe2, 0x19, 0xcc, 0x25, 0x52, 0x69, 0x0a, 0x42, 0xc6, 0x61, 0x46, 0xb5, 0x52,
	0xd8, 0x8a, 0xcd, 0x65, 0x07, 0xc5, 0xaf, 0x00, 0x66, 0x97, 0x9a, 0xd4, 0x43, 0xe7, 0xf9, 0x5b,
	0x79, 0x74, 0x57, 0xd9, 0xa9, 0xdd, 0xc4, 0xf4, 0x59, 0x67, 0x59, 0x3b, 0x58, 0x07, 0xdd, 0x6b,
	0x72, 0x3a, 0xbc, 0x4b, 0xf9, 0xb8, 0x79, 0x8d, 0x07, 0xec, 0x1c, 0x16, 0xdf, 0x74, 0x96, 0xed,
	0x4d, 0xa9, 0x15, 0x9f, 0xf8, 0x4a, 0x9f, 0x70, 0x6c, 0x0e, 0x5c, 0x1b, 0xe2, 0xd3, 0x28, 0x58,
	0x4d, 0x64, 0x07, 0x59, 0x04, 0x4b, 0x17, 0x5e, 0x21, 0x51, 0x7c, 0x40, 0x3e, 0xf3, 0xbf, 0x1c,
	0xa6, 0x44, 0x0a, 0xd3, 0x5d, 0x9d, 0xfc, 0xc3, 0xdb, 0xac, 0x93, 0x7c, 0xa3, 0x33, 0x8b, 0x15,
	0xf1, 0x51, 0x14, 0xae, 0x16, 0xf2, 0x56, 0x8e, 0x31, 0x18, 0x1f, 0x0d, 0x11, 0x0f, 0xa3, 0x70,
	0x35, 0x91, 0x3e, 0x16, 0xe7, 0xad, 0x4a, 0x5f, 0x0d, 0x06, 0x55, 0x09, 0xf3, 0x4f, 0x05, 0xfd,
	0xd7, 0x29, 0xc4, 0x8f, 0x00, 0xa6, 0xdb, 0x87, 0x53, 0xfe, 0x59, 0xfb, 0x68, 0xb8, 0x76, 0x7f,
	0x5a, 0x6e, 0xe5, 0x61, 0x77, 0x5a, 0x6e, 0xdd, 0x8f, 0x21, 0x3c, 0x1a, 0xf2, 0x06, 0x4d, 0xa4,
	0x0b, 0x9d, 0x01, 0xca, 0x14, 0x16, 0x0b, 0xdb, 0x9a, 0xd3, 0x41, 0x67, 0x9c, 0xd5, 0x39, 0x92,
	0x8d, 0xf3, 0xd2, 0x9b, 0x13, 0xca, 0x3e, 0x71, 0xf1, 0x33, 0x80, 0xf9, 0xd5, 0xf5, 0x7e, 0xff,
	0x56, 0x6e, 0x37, 0xec, 0x45, 0x73, 0xf6, 0xa8, 0x2c, 0x5b, 0xba, 0x19, 0xdb, 0xff, 0xc0, 0xd9,
	0xa9, 0x03, 0xdd, 0x9d, 0x8a, 0x13, 0xf6, 0x12, 0xc0, 0x9d, 0xe3, 0xb0, 0xb5, 0x3d, 0xcf, 0x3b,
	0xad, 0xcf, 0x61, 0xb1, 0xab, 0x13, 0x52, 0x95, 0x4e, 0x90, 0x81, 0x2b, 0x36, 0x5e, 0x9f, 0xf5,
	0x31, 0x89, 0x13, 0xf6, 0x0a, 0x96, 0x7e, 0xff, 0x6d, 0xa3, 0x67, 0xe9, 0x0c, 0xb9, 0x87, 0x73,
	0xb6, 0xad, 0x93, 0x4c, 0xd3, 0x4d, 0xc3, 0xb8, 0xbd, 0xb7, 0x2d, 0x99, 0xfa, 0xaf, 0xc3, 0xeb,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x61, 0xd6, 0x9a, 0xc9, 0x2b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MQTTGRPCClient is the client API for MQTTGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MQTTGRPCClient interface {
	Connect(ctx context.Context, in *ConnReq, opts ...grpc.CallOption) (*Response, error)
	Disconnect(ctx context.Context, in *DiscReq, opts ...grpc.CallOption) (*Response, error)
	Subscribe(ctx context.Context, in *SubReq, opts ...grpc.CallOption) (*SubRes, error)
	Unsubscribe(ctx context.Context, in *UnsubReq, opts ...grpc.CallOption) (*Response, error)
	Publish(ctx context.Context, in *PubReq, opts ...grpc.CallOption) (*Response, error)
}

type mQTTGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMQTTGRPCClient(cc grpc.ClientConnInterface) MQTTGRPCClient {
	return &mQTTGRPCClient{cc}
}

func (c *mQTTGRPCClient) Connect(ctx context.Context, in *ConnReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.MQTTGRPC/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTGRPCClient) Disconnect(ctx context.Context, in *DiscReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.MQTTGRPC/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTGRPCClient) Subscribe(ctx context.Context, in *SubReq, opts ...grpc.CallOption) (*SubRes, error) {
	out := new(SubRes)
	err := c.cc.Invoke(ctx, "/pb.MQTTGRPC/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTGRPCClient) Unsubscribe(ctx context.Context, in *UnsubReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.MQTTGRPC/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mQTTGRPCClient) Publish(ctx context.Context, in *PubReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.MQTTGRPC/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQTTGRPCServer is the server API for MQTTGRPC service.
type MQTTGRPCServer interface {
	Connect(context.Context, *ConnReq) (*Response, error)
	Disconnect(context.Context, *DiscReq) (*Response, error)
	Subscribe(context.Context, *SubReq) (*SubRes, error)
	Unsubscribe(context.Context, *UnsubReq) (*Response, error)
	Publish(context.Context, *PubReq) (*Response, error)
}

// UnimplementedMQTTGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedMQTTGRPCServer struct {
}

func (*UnimplementedMQTTGRPCServer) Connect(ctx context.Context, req *ConnReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedMQTTGRPCServer) Disconnect(ctx context.Context, req *DiscReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (*UnimplementedMQTTGRPCServer) Subscribe(ctx context.Context, req *SubReq) (*SubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedMQTTGRPCServer) Unsubscribe(ctx context.Context, req *UnsubReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (*UnimplementedMQTTGRPCServer) Publish(ctx context.Context, req *PubReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterMQTTGRPCServer(s *grpc.Server, srv MQTTGRPCServer) {
	s.RegisterService(&_MQTTGRPC_serviceDesc, srv)
}

func _MQTTGRPC_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTGRPCServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQTTGRPC/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTGRPCServer).Connect(ctx, req.(*ConnReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTGRPC_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTGRPCServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQTTGRPC/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTGRPCServer).Disconnect(ctx, req.(*DiscReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTGRPC_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTGRPCServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQTTGRPC/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTGRPCServer).Subscribe(ctx, req.(*SubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTGRPC_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTGRPCServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQTTGRPC/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTGRPCServer).Unsubscribe(ctx, req.(*UnsubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MQTTGRPC_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTGRPCServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MQTTGRPC/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTGRPCServer).Publish(ctx, req.(*PubReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MQTTGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MQTTGRPC",
	HandlerType: (*MQTTGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _MQTTGRPC_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _MQTTGRPC_Disconnect_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _MQTTGRPC_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _MQTTGRPC_Unsubscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _MQTTGRPC_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mqtt.proto",
}
